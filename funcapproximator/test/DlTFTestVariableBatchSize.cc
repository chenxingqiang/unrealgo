#include "tensorflow/cc/ops/io_ops.h"
#include "tensorflow/cc/client/client_session.h"
#include "tensorflow/cc/ops/const_op.h"
#include "tensorflow/cc/ops/image_ops.h"
#include "tensorflow/cc/ops/standard_ops.h"
#include "tensorflow/core/framework/graph.pb.h"
#include "tensorflow/core/framework/tensor.h"
#include "tensorflow/core/graph/default_device.h"
#include "tensorflow/core/graph/graph_def_builder.h"
#include "tensorflow/core/lib/core/errors.h"
#include "tensorflow/core/lib/core/stringpiece.h"
#include "tensorflow/core/lib/core/threadpool.h"
#include "tensorflow/core/lib/io/path.h"
#include "tensorflow/core/lib/strings/stringprintf.h"
#include "tensorflow/core/platform/env.h"
#include "tensorflow/core/platform/init_main.h"
#include "tensorflow/core/platform/logging.h"
#include "tensorflow/core/platform/types.h"
#include "tensorflow/core/public/session.h"
#include "tensorflow/core/util/command_line_flags.h"

#include <tensorflow/c/tf_status_helper.h>
#include "tensorflow/core/lib/core/coding.h"
#include "tensorflow/core/lib/core/errors.h"
#include "tensorflow/core/lib/hash/crc32c.h"
#include "tensorflow/core/lib/io/record_reader.h"
#include "tensorflow/core/lib/io/record_writer.h"
#include "tensorflow/core/lib/random/simple_philox.h"
#include "tensorflow/core/example/feature_util.h"

#include "tensorflow/core/lib/io/compression.h"
#include "tensorflow/c/c_api_internal.h"
#include "tensorflow/python/lib/io/py_record_writer.h"
#include "tensorflow/python/lib/io/py_record_reader.h"
#include "tensorflow/core/protobuf/meta_graph.pb.h"
#include "../DlTFRecordWriter.h"
#include "../DlTFNetworkEvaluator.h"
#include "../DlTensorUtil.h"
#include "../DlConfig.h"

using tensorflow::Flag;
using tensorflow::Tensor;
using tensorflow::Status;
using tensorflow::string;
using tensorflow::int32;
using namespace tensorflow;
using namespace tensorflow::ops;
using namespace std;
using namespace tensorflow::io;

char image[MAX_BATCHES][NUM_MAPS][BD_SIZE][BD_SIZE];

void printValue(double value[], int size) {
  for (int i = 0; i < size; ++i)
    std::cout << value[i] << " ";
  std::cout << std::endl;
}

void Test(DlTFNetworkEvaluator& evaluator, int batchSize = 1) {
  double policy[MAX_BATCHES][GO_MAX_MOVES];
  double value[MAX_BATCHES];
  // last output:
  // [0.0015691813 0.0038747904 0.0072535984 0.0045069503 0.0026272931 0.0069187176 0.0065817786 0.0016693101 0.0016691075 0.0033500269 0.0018859789 0.0016322098 0.0029879774 0.0023118178 0.0030360108 0.0014707024 0.0030423983 0.002293773 0.0022344361 0.004135191 0.0046108384 0.0038748751 0.0032375848 0.0039012709 0.0053219078 0.0059235264 0.0036773728 0.007269524 0.0062936516 0.0045636748 0.0043459744 0.0011739091 0.0011172225 0.0028370926 0.00087568129 0.0011368468 0.0063936054 0.010542643 0.0023923728 0.0030814086 0.0026936966 0.0038380285 0.0013051016 0.0022768711 0.00265682 0.0015918058 0.0010415709 0.0018831987 0.0021135772 0.00096981367 0.0072437041 0.00032257306 0.00085469976 0.0015697903 0.0024464105 0.0027055626 0.0013841663 0.0020412442 0.00097710011 0.0028538981 0.0024456063 0.0012200373 0.0018373982 0.0038032928 0.002834637 0.0031910629 0.00505949 0.0017677114 0.0027376115 0.0027641302 0.0040617045 0.00093319814 0.0019932727 0.0056252577 0.0028850052 0.0052093617 0.0037168481 0.0050050719 0.00680671 0.0064086467 0.0014639376 0.00098201458 0.0026163484 0.0010619917 0.0023258305 0.003040486 0.0026492274 0.0040717218 0.0056489552 0.0021827251 0.0015984669 0.00063238345 0.0036646225 0.0019018095 0.0014695328 0.005811315 0.0059976378 0.0026402995 0.0027181772 0.0018220738 0.00091350084 0.00070335995 0.0057423869 0.0010701886 0.0015217023 0.0017525906 0.00057401945 0.0017980669 0.0053202361 0.00093916093 0.001894564 0.00024632813 0.001007484 0.0024951941 0.0032620286 0.0017041981 0.0017647321 0.00081883 0.0014761453 0.00070455531 0.0010947579 0.0048525664 0.0047317115 0.0049241022 0.0018089766 0.0039528948 0.0031360742 0.0021981515 0.00481674 0.0018629446 0.00079601019 0.0060369438 0.0035212382 0.0022456802 0.0025572013 0.0044016065 0.00081497518 0.0036002903 0.0020104719 0.0017328941 0.0014104444 0.0021849442 0.0015752262 0.0018035979 0.001714878 0.0064147781 0.002208747 0.0067161149 0.0034167473 0.0033945837 0.006090113 0.0015239766 0.0031985226 0.0022783235 0.0013514599 0.0024198608 0.0016675198 0.0037497312 0.0018463972 0.0031264238 0.00087734772 0.0012878238 0.000647068 0.0023505192 0.0015707406 0.0019024899 0.0016859241 0.00074292172 0.0045939833 0.0010350824 0.002565373 0.0016289788 0.0028401508 0.0011406631 0.0018315227 0.00088129233 0.0031837688 0.0031634178 0.001383947 0.0045080045 0.0011062963 0.0017200877 0.002039189 0.0066135158 0.0026052399 0.0022337795 0.003085796 0.0030054338 0.0021619319 0.0022197838 0.0047081136 0.0036400105 0.0043758559 0.0033958561 0.0038147862 0.002093727 0.00088368886 0.0035862708 0.0014206039 0.0033294305 0.0010391861 0.0021479856 0.0028475868 0.00097720965 0.0013829188 0.0010952955 0.00070145621 0.0067989146 0.0029052938 0.0033426918 0.0035299719 0.0034715554 0.0041334545 0.0024230608 0.0027144908 0.0010740701 0.0042024027 0.0043485719 0.0011341029 0.0020882282 0.0023855835 0.0033030293 0.0027660441 0.0027853793 0.0020591691 0.00209493 0.0019589697 0.0019689808 0.0035043382 0.0014518789 0.0025839771 0.001896265 0.0036211445 0.0022237438 0.0016117175 0.0019384602 0.0031976062 0.0013859397 0.0010518342 0.000779875 0.0005538449 0.002294122 0.00092983257 0.0021160624 0.0022372825 0.0019143837 0.0024222867 0.0035921945 0.0017252872 0.0014976388 0.0032848574 0.0023085747 0.0014900089 0.001131629 0.0010246942 0.0012233584 0.0013002689 0.0016144656 0.00041420589 0.00066379481 0.0024308132 0.0012592643 0.0015085238 0.0061941766 0.0050331904 0.0023691996 0.0023141787 0.0019887262 0.0019098477 0.0014946314 0.0060210242 0.0032741269 0.0056619616 0.0018150239 0.0023595695 0.001949549 0.0020980109 0.00098653336 0.0024870939 0.000351084 0.00031949038 0.0014260015 0.0011058078 0.0022001965 0.0012845279 0.0013093484 0.0038577993 0.0030195909 0.0015437425 0.0027529206 0.0015851762 0.0015336032 0.002398662 0.0014868317 0.0019083756 0.00453188 0.0047468427 0.0010273964 0.0015392011 0.0010086467 0.0038780866 0.0017324758 0.0020763283 0.0021639448 0.0031242634 0.0021081069 0.0021650183 0.0022269543 0.0022666319 0.0010246855 0.00080360181 0.0019580282 0.0021103702 0.00088011276 0.0027335712 0.0018899263 0.0072716023 0.0015205377 0.00617675 0.0022981984 0.0051283357 0.0037373011 0.0017715394 0.0041450872 0.0061399466 0.0007223392 0.0010537989 0.0020734372 0.00098113925 0.0031414533 0.0025476378 0.0034120444 0.0029434955 0.0017061869 0.0017649414 0.0014656131 0.0028379897 0.0011540041 0.0019065271 0.0029065504 0.0008342751 0.0044527291 0.0044752089 0.0040037739 0.0019576175 0.00069919042 0.0010577366 0.0014187675 0.0030379188 0.0013219866 0.0017445238 0.0029016063 0.0058135157 0.0028318011 0.0029952044 0.0015493869 0.0046312814 0.0011927965 0.00393539 0.0016331614 0.0031317966 0.049917426]
  /*
   * input: 0
   * output: [0.0018657182 0.0072943768 0.0068137813 0.0039161877 0.0017562064 0.0031915959 0.003121787 0.0026152018 0.0017095719 0.0023928024 0.0019539078 0.0041006892 0.0032313233 0.0017547695 0.0043352614 0.0019379726 0.004012296 0.0017130479 0.0036809421 0.0066754697 0.0022030564 0.0024048614 0.0030884081 0.0014843525 0.0025904085 0.002896935 0.0014966096 0.0022793482 0.0021302123 0.0035118063 0.002925666 0.000788288 0.0017941114 0.0020524927 0.0014850193 0.0037586838 0.0039554597 0.0028858597 0.0019902815 0.0028410794 0.0029596074 0.0024254154 0.0022274295 0.0045308773 0.0025390298 0.0014121438 0.0031856075 0.0028837076 0.0029125682 0.0041778809 0.0030157298 0.0020032739 0.0026698534 0.0015425722 0.0033861194 0.0038832333 0.0019332031 0.0028333063 0.0016385091 0.0028460557 0.0029809421 0.0019596922 0.0041871006 0.0025149542 0.0019476118 0.0019208329 0.0026933439 0.0019227986 0.0036035667 0.0019007887 0.0021783304 0.0016247636 0.0023338839 0.0020713443 0.0026720837 0.0017676695 0.0026151694 0.0030136842 0.0032185921 0.0033319751 0.0019861916 0.0023900107 0.0022925413 0.0015589005 0.0023101286 0.0025544234 0.0035092595 0.0022189093 0.0026659267 0.0040088431 0.0020382837 0.0013321749 0.005266469 0.002863412 0.0014212365 0.0054072621 0.0041461019 0.0038796691 0.0025317 0.0029327685 0.0027464943 0.0017998271 0.0025641317 0.0020975098 0.0036578209 0.0023927728 0.0028241714 0.0037933777 0.0021324276 0.0018406946 0.0024109446 0.0019086348 0.001386096 0.001284758 0.0018878252 0.0035406335 0.0014243233 0.0015028341 0.0014281897 0.0017641134 0.0016550011 0.0030237143 0.0030773205 0.0040622917 0.0020093825 0.002878671 0.0038675733 0.0047735176 0.0026287066 0.0051626535 0.0026629032 0.0024499048 0.0027041414 0.0052865753 0.0045869327 0.0038642988 0.0016428835 0.0037822872 0.0030475697 0.0021738994 0.0022597178 0.0017923354 0.0017969934 0.0018446275 0.0020086509 0.0019583825 0.0025779195 0.0041564857 0.0045098546 0.0037386913 0.00347794 0.0021827256 0.0022839478 0.0036380566 0.0021517531 0.0011490148 0.0013456299 0.0026940145 0.0016416204 0.0014152151 0.0018316603 0.0023003831 0.0015224591 0.0021043841 0.0021458869 0.0018252315 0.0016359643 0.0019326728 0.0043648924 0.0015597391 0.0017724229 0.0028315277 0.0022292552 0.0016743118 0.0032606514 0.0014997224 0.002200505 0.0020062355 0.0014514468 0.0028828017 0.0022155188 0.0020392011 0.0028945145 0.0030721449 0.0012935104 0.0019652313 0.0013258392 0.0055762669 0.0018241877 0.0018347524 0.0024377988 0.0014922671 0.0028003729 0.0034939654 0.0033790758 0.0029036605 0.0015608257 0.0028341366 0.0017399639 0.0026991745 0.001112893 0.0017513876 0.0026306533 0.0014532823 0.0017186069 0.0019688362 0.0015998643 0.0035900362 0.003513885 0.0035859707 0.0020670553 0.0039353562 0.0029141689 0.0020344115 0.002012948 0.0017326216 0.0026997318 0.0015921323 0.0014035148 0.0020234264 0.0022231545 0.0025925539 0.0029406594 0.0066293082 0.0017818457 0.0030066425 0.0022553883 0.0021102089 0.0034062562 0.0037765873 0.0039084111 0.0024982688 0.0024368078 0.0027166156 0.0020858822 0.0038934746 0.0023205562 0.001966944 0.0026619039 0.0017210806 0.00092288677 0.0017553306 0.000862716 0.0015553263 0.0033257019 0.0021072391 0.0036899147 0.0029054298 0.0032077301 0.0011854622 0.0033598335 0.0031542236 0.0027121075 0.0015641622 0.0021303683 0.0020657491 0.0016938442 0.0036538867 0.0015492773 0.0025513247 0.0024256289 0.0026637984 0.0037709565 0.0021658319 0.0024122247 0.0052619725 0.0026398075 0.0018186892 0.0024078866 0.002282653 0.002508411 0.0033391751 0.0035307361 0.0022853927 0.0019665947 0.001981908 0.0023210952 0.0018525413 0.0025051837 0.0014272102 0.0021969564 0.0029921064 0.0048970995 0.0021444159 0.0016641312 0.0025506834 0.0030583828 0.0048428816 0.0019584559 0.001451661 0.00290451 0.0023047698 0.0026420632 0.00455195 0.0022164448 0.0043124468 0.0063242447 0.0014905635 0.0022238942 0.0019590415 0.0029920393 0.002564989 0.00239894 0.0025486818 0.0028778051 0.0024937887 0.0015062701 0.0036934565 0.0020361959 0.0015333772 0.0014954977 0.0026725507 0.0027308085 0.0013204836 0.0023649924 0.0029189223 0.0044440953 0.0025212653 0.0028542262 0.0024416971 0.0040259641 0.0016373377 0.0048342124 0.0036030659 0.0036731567 0.0014360315 0.0024453744 0.0040608039 0.0061343717 0.0031665368 0.0046319305 0.0022411647 0.004325944 0.0044025 0.0020046709 0.0033333623 0.00394656 0.0026047525 0.0026522824 0.0053388439 0.0059736571 0.0037808754 0.003196046 0.0036527666 0.0027205395 0.0020600986 0.0028672169 0.0029166928 0.001543768 0.0031498903 0.0035634756 0.0043279366 0.0035880741 0.0029669032 0.0023016969 0.0017352133 0.0031181104 0.0021315245 0.003737136 0.0035805244 0.0028402251 0.024677154]
   */
  for (int times = 0; times < 2; ++times) {
    for (int batchID = 0; batchID < batchSize; ++batchID)
      for (int i = 0; i < NUM_MAPS; i++)
        for (int j = 0; j < BD_SIZE; j++)
          for (int k = 0; k < BD_SIZE; k++)
            image[batchID][i][j][k] = (rand() % 128 == 0) ? 0:1;

    evaluator.Evaluate(image, policy, value, batchSize);
    printValue(value, batchSize);
  }
}

int main(int argc, char** argv) {
  DlTFNetworkEvaluator evaluator("bootstrap-ckpt.meta", "feature_input",
                                           {"resnet/tower_0/policy_head/policy_predict",
                                            "resnet/tower_0/value_head/reward_predict"});
  evaluator.UpdateCheckPoint("bootstrap-ckpt");

  Test(evaluator); // Verified
  Test(evaluator, 4);
  Test(evaluator, 8);
  Test(evaluator, 16);
  return 0;
}